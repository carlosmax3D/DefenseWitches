package network;

import com.naef.jnlua.LuaState;

public class LuaHelper {
    private static final String luaCode = "----------------------------------------------------------------------------------------------- \t\t\n-- Helper functions that are called from the Lua extension \t\t\t\t\t\t\t\t\t\t\t\n-- \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nlocal function DEBUG(...) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t-- print(\"DEBUG (helper) \" .. string.format(unpack(arg))) \t\t\t\t\t\t\t\t\t\t\nend \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nfunction _network_pathForFile(filename, baseDirectory) \t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tDEBUG(\"filename type: %s, value: %s\", type(filename), tostring(filename)) \t\t\t\t\t\t\n\tDEBUG(\"baseDirectory type: %s, value: %s\", type(baseDirectory), tostring(baseDirectory)) \t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tlocal path = system.pathForFile(filename, baseDirectory) \t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tDEBUG(\"path: %s\", path) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tlocal isResourceFile = (( nil == baseDirectory ) or ( system.ResourceDirectory == baseDirectory )) \n\tDEBUG(\"Is resource file: %s\", tostring(isResourceFile)) \t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\treturn path, isResourceFile \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nend \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n----------------------------------------------------------------------------------------------- \t\t\n-- Functions implemented in Lua and registered into the asyncHttp module namespace \t\t\t\t\t\n-- \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n-- download( url, method, listener [, params], filename [, baseDirectory] ) \t\t\t\t\t\t\t\n-- \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nfunction network.download( url, method, listener, params, filename, baseDirectory ) \t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tif ( \"string\" == type( params ) ) then \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t-- Optional params table omitted, shift params values right \t\t\t\t\t\t\t\t\t\n\t\tbaseDirectory = filename \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tfilename = params \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tparams = nil \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tend \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tlocal params = params or {} \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tif (params.progress) then\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tparams.progress = \"download\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\telse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tparams.progress = nil \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tend\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tparams.response = params.response or {} \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tparams.response.filename = filename \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tif (baseDirectory == nil or system.ResourceDirectory == baseDirectory ) then\t\t\t\t\t\t\n\t\tbaseDirectory = system.DocumentsDirectory\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tend\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tparams.response.baseDirectory = baseDirectory \t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\treturn network.request( url, method, listener, params ) \t\t\t\t\t\t\t\t\t\t\t\nend \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n-- upload( url, method, listener [, params], filename [, baseDirectory] [, contentType] ) \t\t\t\t\n-- \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nfunction network.upload( url, method, listener, params, filename, baseDirectory, contentType ) \t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tif ( \"string\" == type( params ) ) then \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t-- Optional params table omitted, shift param values right \t\t\t\t\t\t\t\t\t\t\n\t\tcontentType = baseDirectory \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tbaseDirectory = filename \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tfilename = params \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tparams = nil \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tend \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tif ( \"string\" == type( baseDirectory ) ) then \t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t-- Optional baseDirectory omitted, shift params values right \t\t\t\t\t\t\t\t\t\n\t\tcontentType = baseDirectory \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tbaseDirectory = nil \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tend \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tlocal params = params or {} \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tif (params.progress) then\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tparams.progress = \"upload\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\telse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tparams.progress = nil \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tend\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tparams.body = params.body or {} \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tparams.body.filename = filename \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tparams.body.baseDirectory = baseDirectory \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tif ( contentType ) then \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tparams.headers = params.headers or {} \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tparams.headers[\"Content-Type\"] = contentType \t\t\t\t\t\t\t\t\t\t\t\t\t\n\tend \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\treturn network.request( url, method, listener, params ) \t\t\t\t\t\t\t\t\t\t\t\nend \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nnetwork.canDetectNetworkStatusChanges = false\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n-- network.setStatusListener()\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n-- Default implementation is a no-op\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nfunction network.setStatusListener()\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tprint( \"WARNING: network.setStatusListener() is not supported on this platform\" )\t\t\t\t\t\nend\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n";

    public static Boolean loadLuaHelper(LuaState luaState) {
        NetworkRequest.debug("Loading Lua helper", new Object[0]);
        luaState.load(luaCode, "=simple");
        luaState.call(0, 0);
        NetworkRequest.debug("Lua helper module loaded", new Object[0]);
        return true;
    }
}
